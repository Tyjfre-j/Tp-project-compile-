Grammar

    0 $accept: program $end

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    2 declaration_part: declaration_list

    3 declaration_list: declaration_list declaration
    4                 | declaration

    5 declaration: variable_declaration
    6            | constant_declaration

    7 variable_declaration: let var_list COLON type SEMI_COLON
    8                     | let var_list COLON OPEN_SQUARE_BRACKET type SEMI_COLON integer_value CLOSE_SQUARE_BRACKET SEMI_COLON

    9 var_list: identifier
   10         | var_list COMMA identifier

   11 type: Int_keyword
   12     | Float_keyword

   13 constant_declaration: define Const identifier COLON type EQUAL nature SEMI_COLON

   14 nature: integer_value
   15       | float_value
   16       | OPEN_PARENTHESIS signed_float_value CLOSE_PARENTHESIS
   17       | OPEN_PARENTHESIS signed_integer_value CLOSE_PARENTHESIS

   18 instruction_part: instruction_list

   19 instruction_list: instruction_list instruction
   20                 | instruction

   21 instruction: affectation
   22            | if_statement
   23            | do_while_loop
   24            | for_loop
   25            | input_statement
   26            | output_statement

   27 affectation: identifier AFFECTATION expression SEMI_COLON
   28            | identifier OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET AFFECTATION expression SEMI_COLON

   29 expression: identifier
   30           | nature
   31           | expression ADDITION expression
   32           | expression SUBSTRACTION expression
   33           | expression MULTIPLICATION expression
   34           | expression DIVISION expression
   35           | OPEN_PARENTHESIS expression CLOSE_PARENTHESIS

   36 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE
   37             | IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

   38 condition: expression GREATER_THAN expression
   39          | expression LESS_THAN expression
   40          | expression GREATER_OR_EQUAL expression
   41          | expression LESS_OR_EQUAL expression
   42          | expression EQUAL_TO expression
   43          | expression NOT_EQUAL expression
   44          | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
   45          | condition AND condition
   46          | condition OR condition
   47          | NOT condition

   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS SEMI_COLON

   49 for_loop: FOR identifier FROM expression TO expression STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

   50 input_statement: INPUT OPEN_PARENTHESIS identifier CLOSE_PARENTHESIS SEMI_COLON

   51 output_statement: OUTPUT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS SEMI_COLON
   52                 | OUTPUT OPEN_PARENTHESIS STRING COMMA identifier CLOSE_PARENTHESIS SEMI_COLON


Terminals, with rules where they appear

$end (0) 0
error (256)
MainPrgm (258) 1
Var (259) 1
BeginPg (260) 1
EndPg (261) 1
let (262) 7 8
define (263) 13
Const (264) 13
IF (265) 36 37
THEN (266) 36 37
ELSE (267) 37
DO (268) 48
WHILE (269) 48
FOR (270) 49
FROM (271) 49
TO (272) 49
STEP (273) 49
INPUT (274) 50
OUTPUT (275) 51 52
AND (276) 45
OR (277) 46
COMMA (278) 10 52
SEMI_COLON (279) 1 7 8 13 27 28 48 50 51 52
AFFECTATION (280) 27 28
EQUAL (281) 13
EQUAL_TO (282) 42
LESS_OR_EQUAL (283) 41
GREATER_OR_EQUAL (284) 40
NOT_EQUAL (285) 43
COLON (286) 7 8 13
ADDITION (287) 31
SUBSTRACTION (288) 32
DIVISION (289) 34
MULTIPLICATION (290) 33
OPEN_PARENTHESIS (291) 16 17 35 36 37 44 48 50 51 52
CLOSE_PARENTHESIS (292) 16 17 35 36 37 44 48 50 51 52
OPEN_CURLY_BRACE (293) 1 36 37 48 49
CLOSE_CURLY_BRACE (294) 1 36 37 48 49
OPEN_SQUARE_BRACKET (295) 8 28
CLOSE_SQUARE_BRACKET (296) 8 28
LESS_THAN (297) 39
GREATER_THAN (298) 38
NOT (299) 47
identifier (300) 1 9 10 13 27 28 29 49 50 52
STRING (301) 51 52
Int_keyword (302) 11
Float_keyword (303) 12
integer_value (304) 8 14
signed_integer_value (305) 17
float_value (306) 15
signed_float_value (307) 16


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1, on right: 0
declaration_part (55)
    on left: 2, on right: 1
declaration_list (56)
    on left: 3 4, on right: 2 3
declaration (57)
    on left: 5 6, on right: 3 4
variable_declaration (58)
    on left: 7 8, on right: 5
var_list (59)
    on left: 9 10, on right: 7 8 10
type (60)
    on left: 11 12, on right: 7 8 13
constant_declaration (61)
    on left: 13, on right: 6
nature (62)
    on left: 14 15 16 17, on right: 13 30
instruction_part (63)
    on left: 18, on right: 1
instruction_list (64)
    on left: 19 20, on right: 18 19 36 37 48 49
instruction (65)
    on left: 21 22 23 24 25 26, on right: 19 20
affectation (66)
    on left: 27 28, on right: 21
expression (67)
    on left: 29 30 31 32 33 34 35, on right: 27 28 31 32 33 34 35 38
    39 40 41 42 43 49
if_statement (68)
    on left: 36 37, on right: 22
condition (69)
    on left: 38 39 40 41 42 43 44 45 46 47, on right: 36 37 44 45 46
    47 48
do_while_loop (70)
    on left: 48, on right: 23
for_loop (71)
    on left: 49, on right: 24
input_statement (72)
    on left: 50, on right: 25
output_statement (73)
    on left: 51 52, on right: 26


state 0

    0 $accept: . program $end

    MainPrgm  shift, and go to state 1

    program  go to state 2


state 1

    1 program: MainPrgm . identifier SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    identifier  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: MainPrgm identifier . SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    SEMI_COLON  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: MainPrgm identifier SEMI_COLON . Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    Var  shift, and go to state 6


state 6

    1 program: MainPrgm identifier SEMI_COLON Var . declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    let     shift, and go to state 7
    define  shift, and go to state 8

    declaration_part      go to state 9
    declaration_list      go to state 10
    declaration           go to state 11
    variable_declaration  go to state 12
    constant_declaration  go to state 13


state 7

    7 variable_declaration: let . var_list COLON type SEMI_COLON
    8                     | let . var_list COLON OPEN_SQUARE_BRACKET type SEMI_COLON integer_value CLOSE_SQUARE_BRACKET SEMI_COLON

    identifier  shift, and go to state 14

    var_list  go to state 15


state 8

   13 constant_declaration: define . Const identifier COLON type EQUAL nature SEMI_COLON

    Const  shift, and go to state 16


state 9

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part . BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    BeginPg  shift, and go to state 17


state 10

    2 declaration_part: declaration_list .
    3 declaration_list: declaration_list . declaration

    let     shift, and go to state 7
    define  shift, and go to state 8

    $default  reduce using rule 2 (declaration_part)

    declaration           go to state 18
    variable_declaration  go to state 12
    constant_declaration  go to state 13


state 11

    4 declaration_list: declaration .

    $default  reduce using rule 4 (declaration_list)


state 12

    5 declaration: variable_declaration .

    $default  reduce using rule 5 (declaration)


state 13

    6 declaration: constant_declaration .

    $default  reduce using rule 6 (declaration)


state 14

    9 var_list: identifier .

    $default  reduce using rule 9 (var_list)


state 15

    7 variable_declaration: let var_list . COLON type SEMI_COLON
    8                     | let var_list . COLON OPEN_SQUARE_BRACKET type SEMI_COLON integer_value CLOSE_SQUARE_BRACKET SEMI_COLON
   10 var_list: var_list . COMMA identifier

    COMMA  shift, and go to state 19
    COLON  shift, and go to state 20


state 16

   13 constant_declaration: define Const . identifier COLON type EQUAL nature SEMI_COLON

    identifier  shift, and go to state 21


state 17

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part BeginPg . OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    OPEN_CURLY_BRACE  shift, and go to state 22


state 18

    3 declaration_list: declaration_list declaration .

    $default  reduce using rule 3 (declaration_list)


state 19

   10 var_list: var_list COMMA . identifier

    identifier  shift, and go to state 23


state 20

    7 variable_declaration: let var_list COLON . type SEMI_COLON
    8                     | let var_list COLON . OPEN_SQUARE_BRACKET type SEMI_COLON integer_value CLOSE_SQUARE_BRACKET SEMI_COLON

    OPEN_SQUARE_BRACKET  shift, and go to state 24
    Int_keyword          shift, and go to state 25
    Float_keyword        shift, and go to state 26

    type  go to state 27


state 21

   13 constant_declaration: define Const identifier . COLON type EQUAL nature SEMI_COLON

    COLON  shift, and go to state 28


state 22

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE . instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_part  go to state 35
    instruction_list  go to state 36
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 23

   10 var_list: var_list COMMA identifier .

    $default  reduce using rule 10 (var_list)


state 24

    8 variable_declaration: let var_list COLON OPEN_SQUARE_BRACKET . type SEMI_COLON integer_value CLOSE_SQUARE_BRACKET SEMI_COLON

    Int_keyword    shift, and go to state 25
    Float_keyword  shift, and go to state 26

    type  go to state 44


state 25

   11 type: Int_keyword .

    $default  reduce using rule 11 (type)


state 26

   12 type: Float_keyword .

    $default  reduce using rule 12 (type)


state 27

    7 variable_declaration: let var_list COLON type . SEMI_COLON

    SEMI_COLON  shift, and go to state 45


state 28

   13 constant_declaration: define Const identifier COLON . type EQUAL nature SEMI_COLON

    Int_keyword    shift, and go to state 25
    Float_keyword  shift, and go to state 26

    type  go to state 46


state 29

   36 if_statement: IF . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE
   37             | IF . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    OPEN_PARENTHESIS  shift, and go to state 47


state 30

   48 do_while_loop: DO . OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS SEMI_COLON

    OPEN_CURLY_BRACE  shift, and go to state 48


state 31

   49 for_loop: FOR . identifier FROM expression TO expression STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    identifier  shift, and go to state 49


state 32

   50 input_statement: INPUT . OPEN_PARENTHESIS identifier CLOSE_PARENTHESIS SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 50


state 33

   51 output_statement: OUTPUT . OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS SEMI_COLON
   52                 | OUTPUT . OPEN_PARENTHESIS STRING COMMA identifier CLOSE_PARENTHESIS SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 51


state 34

   27 affectation: identifier . AFFECTATION expression SEMI_COLON
   28            | identifier . OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET AFFECTATION expression SEMI_COLON

    AFFECTATION          shift, and go to state 52
    OPEN_SQUARE_BRACKET  shift, and go to state 53


state 35

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part . CLOSE_CURLY_BRACE EndPg SEMI_COLON

    CLOSE_CURLY_BRACE  shift, and go to state 54


state 36

   18 instruction_part: instruction_list .
   19 instruction_list: instruction_list . instruction

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    $default  reduce using rule 18 (instruction_part)

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 37

   20 instruction_list: instruction .

    $default  reduce using rule 20 (instruction_list)


state 38

   21 instruction: affectation .

    $default  reduce using rule 21 (instruction)


state 39

   22 instruction: if_statement .

    $default  reduce using rule 22 (instruction)


state 40

   23 instruction: do_while_loop .

    $default  reduce using rule 23 (instruction)


state 41

   24 instruction: for_loop .

    $default  reduce using rule 24 (instruction)


state 42

   25 instruction: input_statement .

    $default  reduce using rule 25 (instruction)


state 43

   26 instruction: output_statement .

    $default  reduce using rule 26 (instruction)


state 44

    8 variable_declaration: let var_list COLON OPEN_SQUARE_BRACKET type . SEMI_COLON integer_value CLOSE_SQUARE_BRACKET SEMI_COLON

    SEMI_COLON  shift, and go to state 56


state 45

    7 variable_declaration: let var_list COLON type SEMI_COLON .

    $default  reduce using rule 7 (variable_declaration)


state 46

   13 constant_declaration: define Const identifier COLON type . EQUAL nature SEMI_COLON

    EQUAL  shift, and go to state 57


state 47

   36 if_statement: IF OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE
   37             | IF OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    OPEN_PARENTHESIS  shift, and go to state 58
    NOT               shift, and go to state 59
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 65


state 48

   48 do_while_loop: DO OPEN_CURLY_BRACE . instruction_list CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS SEMI_COLON

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 66
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 49

   49 for_loop: FOR identifier . FROM expression TO expression STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    FROM  shift, and go to state 67


state 50

   50 input_statement: INPUT OPEN_PARENTHESIS . identifier CLOSE_PARENTHESIS SEMI_COLON

    identifier  shift, and go to state 68


state 51

   51 output_statement: OUTPUT OPEN_PARENTHESIS . STRING CLOSE_PARENTHESIS SEMI_COLON
   52                 | OUTPUT OPEN_PARENTHESIS . STRING COMMA identifier CLOSE_PARENTHESIS SEMI_COLON

    STRING  shift, and go to state 69


state 52

   27 affectation: identifier AFFECTATION . expression SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 71


state 53

   28 affectation: identifier OPEN_SQUARE_BRACKET . expression CLOSE_SQUARE_BRACKET AFFECTATION expression SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 72


state 54

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE . EndPg SEMI_COLON

    EndPg  shift, and go to state 73


state 55

   19 instruction_list: instruction_list instruction .

    $default  reduce using rule 19 (instruction_list)


state 56

    8 variable_declaration: let var_list COLON OPEN_SQUARE_BRACKET type SEMI_COLON . integer_value CLOSE_SQUARE_BRACKET SEMI_COLON

    integer_value  shift, and go to state 74


state 57

   13 constant_declaration: define Const identifier COLON type EQUAL . nature SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 75
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature  go to state 76


state 58

   16 nature: OPEN_PARENTHESIS . signed_float_value CLOSE_PARENTHESIS
   17       | OPEN_PARENTHESIS . signed_integer_value CLOSE_PARENTHESIS
   35 expression: OPEN_PARENTHESIS . expression CLOSE_PARENTHESIS
   44 condition: OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS

    OPEN_PARENTHESIS      shift, and go to state 58
    NOT                   shift, and go to state 59
    identifier            shift, and go to state 60
    integer_value         shift, and go to state 61
    signed_integer_value  shift, and go to state 77
    float_value           shift, and go to state 62
    signed_float_value    shift, and go to state 78

    nature      go to state 63
    expression  go to state 79
    condition   go to state 80


state 59

   47 condition: NOT . condition

    OPEN_PARENTHESIS  shift, and go to state 58
    NOT               shift, and go to state 59
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 81


state 60

   29 expression: identifier .

    $default  reduce using rule 29 (expression)


state 61

   14 nature: integer_value .

    $default  reduce using rule 14 (nature)


state 62

   15 nature: float_value .

    $default  reduce using rule 15 (nature)


state 63

   30 expression: nature .

    $default  reduce using rule 30 (expression)


state 64

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   38 condition: expression . GREATER_THAN expression
   39          | expression . LESS_THAN expression
   40          | expression . GREATER_OR_EQUAL expression
   41          | expression . LESS_OR_EQUAL expression
   42          | expression . EQUAL_TO expression
   43          | expression . NOT_EQUAL expression

    EQUAL_TO          shift, and go to state 82
    LESS_OR_EQUAL     shift, and go to state 83
    GREATER_OR_EQUAL  shift, and go to state 84
    NOT_EQUAL         shift, and go to state 85
    ADDITION          shift, and go to state 86
    SUBSTRACTION      shift, and go to state 87
    DIVISION          shift, and go to state 88
    MULTIPLICATION    shift, and go to state 89
    LESS_THAN         shift, and go to state 90
    GREATER_THAN      shift, and go to state 91


state 65

   36 if_statement: IF OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE
   37             | IF OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE
   45 condition: condition . AND condition
   46          | condition . OR condition

    AND                shift, and go to state 92
    OR                 shift, and go to state 93
    CLOSE_PARENTHESIS  shift, and go to state 94


state 66

   19 instruction_list: instruction_list . instruction
   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list . CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS SEMI_COLON

    IF                 shift, and go to state 29
    DO                 shift, and go to state 30
    FOR                shift, and go to state 31
    INPUT              shift, and go to state 32
    OUTPUT             shift, and go to state 33
    CLOSE_CURLY_BRACE  shift, and go to state 95
    identifier         shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 67

   49 for_loop: FOR identifier FROM . expression TO expression STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 96


state 68

   50 input_statement: INPUT OPEN_PARENTHESIS identifier . CLOSE_PARENTHESIS SEMI_COLON

    CLOSE_PARENTHESIS  shift, and go to state 97


state 69

   51 output_statement: OUTPUT OPEN_PARENTHESIS STRING . CLOSE_PARENTHESIS SEMI_COLON
   52                 | OUTPUT OPEN_PARENTHESIS STRING . COMMA identifier CLOSE_PARENTHESIS SEMI_COLON

    COMMA              shift, and go to state 98
    CLOSE_PARENTHESIS  shift, and go to state 99


state 70

   16 nature: OPEN_PARENTHESIS . signed_float_value CLOSE_PARENTHESIS
   17       | OPEN_PARENTHESIS . signed_integer_value CLOSE_PARENTHESIS
   35 expression: OPEN_PARENTHESIS . expression CLOSE_PARENTHESIS

    OPEN_PARENTHESIS      shift, and go to state 70
    identifier            shift, and go to state 60
    integer_value         shift, and go to state 61
    signed_integer_value  shift, and go to state 77
    float_value           shift, and go to state 62
    signed_float_value    shift, and go to state 78

    nature      go to state 63
    expression  go to state 100


state 71

   27 affectation: identifier AFFECTATION expression . SEMI_COLON
   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression

    SEMI_COLON      shift, and go to state 101
    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89


state 72

   28 affectation: identifier OPEN_SQUARE_BRACKET expression . CLOSE_SQUARE_BRACKET AFFECTATION expression SEMI_COLON
   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression

    ADDITION              shift, and go to state 86
    SUBSTRACTION          shift, and go to state 87
    DIVISION              shift, and go to state 88
    MULTIPLICATION        shift, and go to state 89
    CLOSE_SQUARE_BRACKET  shift, and go to state 102


state 73

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg . SEMI_COLON

    SEMI_COLON  shift, and go to state 103


state 74

    8 variable_declaration: let var_list COLON OPEN_SQUARE_BRACKET type SEMI_COLON integer_value . CLOSE_SQUARE_BRACKET SEMI_COLON

    CLOSE_SQUARE_BRACKET  shift, and go to state 104


state 75

   16 nature: OPEN_PARENTHESIS . signed_float_value CLOSE_PARENTHESIS
   17       | OPEN_PARENTHESIS . signed_integer_value CLOSE_PARENTHESIS

    signed_integer_value  shift, and go to state 77
    signed_float_value    shift, and go to state 78


state 76

   13 constant_declaration: define Const identifier COLON type EQUAL nature . SEMI_COLON

    SEMI_COLON  shift, and go to state 105


state 77

   17 nature: OPEN_PARENTHESIS signed_integer_value . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS  shift, and go to state 106


state 78

   16 nature: OPEN_PARENTHESIS signed_float_value . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS  shift, and go to state 107


state 79

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   35           | OPEN_PARENTHESIS expression . CLOSE_PARENTHESIS
   38 condition: expression . GREATER_THAN expression
   39          | expression . LESS_THAN expression
   40          | expression . GREATER_OR_EQUAL expression
   41          | expression . LESS_OR_EQUAL expression
   42          | expression . EQUAL_TO expression
   43          | expression . NOT_EQUAL expression

    EQUAL_TO           shift, and go to state 82
    LESS_OR_EQUAL      shift, and go to state 83
    GREATER_OR_EQUAL   shift, and go to state 84
    NOT_EQUAL          shift, and go to state 85
    ADDITION           shift, and go to state 86
    SUBSTRACTION       shift, and go to state 87
    DIVISION           shift, and go to state 88
    MULTIPLICATION     shift, and go to state 89
    CLOSE_PARENTHESIS  shift, and go to state 108
    LESS_THAN          shift, and go to state 90
    GREATER_THAN       shift, and go to state 91


state 80

   44 condition: OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS
   45          | condition . AND condition
   46          | condition . OR condition

    AND                shift, and go to state 92
    OR                 shift, and go to state 93
    CLOSE_PARENTHESIS  shift, and go to state 109


state 81

   45 condition: condition . AND condition
   46          | condition . OR condition
   47          | NOT condition .

    $default  reduce using rule 47 (condition)


state 82

   42 condition: expression EQUAL_TO . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 110


state 83

   41 condition: expression LESS_OR_EQUAL . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 111


state 84

   40 condition: expression GREATER_OR_EQUAL . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 112


state 85

   43 condition: expression NOT_EQUAL . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 113


state 86

   31 expression: expression ADDITION . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 114


state 87

   32 expression: expression SUBSTRACTION . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 115


state 88

   34 expression: expression DIVISION . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 116


state 89

   33 expression: expression MULTIPLICATION . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 117


state 90

   39 condition: expression LESS_THAN . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 118


state 91

   38 condition: expression GREATER_THAN . expression

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 119


state 92

   45 condition: condition AND . condition

    OPEN_PARENTHESIS  shift, and go to state 58
    NOT               shift, and go to state 59
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 120


state 93

   46 condition: condition OR . condition

    OPEN_PARENTHESIS  shift, and go to state 58
    NOT               shift, and go to state 59
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 121


state 94

   36 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE
   37             | IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    THEN  shift, and go to state 122


state 95

   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS SEMI_COLON

    WHILE  shift, and go to state 123


state 96

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   49 for_loop: FOR identifier FROM expression . TO expression STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    TO              shift, and go to state 124
    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89


state 97

   50 input_statement: INPUT OPEN_PARENTHESIS identifier CLOSE_PARENTHESIS . SEMI_COLON

    SEMI_COLON  shift, and go to state 125


state 98

   52 output_statement: OUTPUT OPEN_PARENTHESIS STRING COMMA . identifier CLOSE_PARENTHESIS SEMI_COLON

    identifier  shift, and go to state 126


state 99

   51 output_statement: OUTPUT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS . SEMI_COLON

    SEMI_COLON  shift, and go to state 127


state 100

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   35           | OPEN_PARENTHESIS expression . CLOSE_PARENTHESIS

    ADDITION           shift, and go to state 86
    SUBSTRACTION       shift, and go to state 87
    DIVISION           shift, and go to state 88
    MULTIPLICATION     shift, and go to state 89
    CLOSE_PARENTHESIS  shift, and go to state 108


state 101

   27 affectation: identifier AFFECTATION expression SEMI_COLON .

    $default  reduce using rule 27 (affectation)


state 102

   28 affectation: identifier OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET . AFFECTATION expression SEMI_COLON

    AFFECTATION  shift, and go to state 128


state 103

    1 program: MainPrgm identifier SEMI_COLON Var declaration_part BeginPg OPEN_CURLY_BRACE instruction_part CLOSE_CURLY_BRACE EndPg SEMI_COLON .

    $default  reduce using rule 1 (program)


state 104

    8 variable_declaration: let var_list COLON OPEN_SQUARE_BRACKET type SEMI_COLON integer_value CLOSE_SQUARE_BRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 129


state 105

   13 constant_declaration: define Const identifier COLON type EQUAL nature SEMI_COLON .

    $default  reduce using rule 13 (constant_declaration)


state 106

   17 nature: OPEN_PARENTHESIS signed_integer_value CLOSE_PARENTHESIS .

    $default  reduce using rule 17 (nature)


state 107

   16 nature: OPEN_PARENTHESIS signed_float_value CLOSE_PARENTHESIS .

    $default  reduce using rule 16 (nature)


state 108

   35 expression: OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .

    $default  reduce using rule 35 (expression)


state 109

   44 condition: OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .

    $default  reduce using rule 44 (condition)


state 110

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   42 condition: expression EQUAL_TO expression .

    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 42 (condition)


state 111

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   41 condition: expression LESS_OR_EQUAL expression .

    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 41 (condition)


state 112

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   40 condition: expression GREATER_OR_EQUAL expression .

    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 40 (condition)


state 113

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   43 condition: expression NOT_EQUAL expression .

    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 43 (condition)


state 114

   31 expression: expression . ADDITION expression
   31           | expression ADDITION expression .
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression

    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 31 (expression)


state 115

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   32           | expression SUBSTRACTION expression .
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression

    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 32 (expression)


state 116

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   34           | expression DIVISION expression .

    $default  reduce using rule 34 (expression)


state 117

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   33           | expression MULTIPLICATION expression .
   34           | expression . DIVISION expression

    $default  reduce using rule 33 (expression)


state 118

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   39 condition: expression LESS_THAN expression .

    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 39 (condition)


state 119

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   38 condition: expression GREATER_THAN expression .

    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89

    $default  reduce using rule 38 (condition)


state 120

   45 condition: condition . AND condition
   45          | condition AND condition .
   46          | condition . OR condition

    $default  reduce using rule 45 (condition)


state 121

   45 condition: condition . AND condition
   46          | condition . OR condition
   46          | condition OR condition .

    $default  reduce using rule 46 (condition)


state 122

   36 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN . OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE
   37             | IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN . OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    OPEN_CURLY_BRACE  shift, and go to state 130


state 123

   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE WHILE . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 131


state 124

   49 for_loop: FOR identifier FROM expression TO . expression STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 132


state 125

   50 input_statement: INPUT OPEN_PARENTHESIS identifier CLOSE_PARENTHESIS SEMI_COLON .

    $default  reduce using rule 50 (input_statement)


state 126

   52 output_statement: OUTPUT OPEN_PARENTHESIS STRING COMMA identifier . CLOSE_PARENTHESIS SEMI_COLON

    CLOSE_PARENTHESIS  shift, and go to state 133


state 127

   51 output_statement: OUTPUT OPEN_PARENTHESIS STRING CLOSE_PARENTHESIS SEMI_COLON .

    $default  reduce using rule 51 (output_statement)


state 128

   28 affectation: identifier OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET AFFECTATION . expression SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 134


state 129

    8 variable_declaration: let var_list COLON OPEN_SQUARE_BRACKET type SEMI_COLON integer_value CLOSE_SQUARE_BRACKET SEMI_COLON .

    $default  reduce using rule 8 (variable_declaration)


state 130

   36 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE . instruction_list CLOSE_CURLY_BRACE
   37             | IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE . instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 135
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 131

   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS SEMI_COLON

    OPEN_PARENTHESIS  shift, and go to state 58
    NOT               shift, and go to state 59
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 136


state 132

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   49 for_loop: FOR identifier FROM expression TO expression . STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    STEP            shift, and go to state 137
    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89


state 133

   52 output_statement: OUTPUT OPEN_PARENTHESIS STRING COMMA identifier CLOSE_PARENTHESIS . SEMI_COLON

    SEMI_COLON  shift, and go to state 138


state 134

   28 affectation: identifier OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET AFFECTATION expression . SEMI_COLON
   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression

    SEMI_COLON      shift, and go to state 139
    ADDITION        shift, and go to state 86
    SUBSTRACTION    shift, and go to state 87
    DIVISION        shift, and go to state 88
    MULTIPLICATION  shift, and go to state 89


state 135

   19 instruction_list: instruction_list . instruction
   36 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list . CLOSE_CURLY_BRACE
   37             | IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list . CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    IF                 shift, and go to state 29
    DO                 shift, and go to state 30
    FOR                shift, and go to state 31
    INPUT              shift, and go to state 32
    OUTPUT             shift, and go to state 33
    CLOSE_CURLY_BRACE  shift, and go to state 140
    identifier         shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 136

   45 condition: condition . AND condition
   46          | condition . OR condition
   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS SEMI_COLON

    AND                shift, and go to state 92
    OR                 shift, and go to state 93
    CLOSE_PARENTHESIS  shift, and go to state 141


state 137

   49 for_loop: FOR identifier FROM expression TO expression STEP . expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    OPEN_PARENTHESIS  shift, and go to state 70
    identifier        shift, and go to state 60
    integer_value     shift, and go to state 61
    float_value       shift, and go to state 62

    nature      go to state 63
    expression  go to state 142


state 138

   52 output_statement: OUTPUT OPEN_PARENTHESIS STRING COMMA identifier CLOSE_PARENTHESIS SEMI_COLON .

    $default  reduce using rule 52 (output_statement)


state 139

   28 affectation: identifier OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET AFFECTATION expression SEMI_COLON .

    $default  reduce using rule 28 (affectation)


state 140

   36 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE .
   37             | IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE . ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    ELSE  shift, and go to state 143

    $default  reduce using rule 36 (if_statement)


state 141

   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . SEMI_COLON

    SEMI_COLON  shift, and go to state 144


state 142

   31 expression: expression . ADDITION expression
   32           | expression . SUBSTRACTION expression
   33           | expression . MULTIPLICATION expression
   34           | expression . DIVISION expression
   49 for_loop: FOR identifier FROM expression TO expression STEP expression . OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    ADDITION          shift, and go to state 86
    SUBSTRACTION      shift, and go to state 87
    DIVISION          shift, and go to state 88
    MULTIPLICATION    shift, and go to state 89
    OPEN_CURLY_BRACE  shift, and go to state 145


state 143

   37 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE . OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE

    OPEN_CURLY_BRACE  shift, and go to state 146


state 144

   48 do_while_loop: DO OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS SEMI_COLON .

    $default  reduce using rule 48 (do_while_loop)


state 145

   49 for_loop: FOR identifier FROM expression TO expression STEP expression OPEN_CURLY_BRACE . instruction_list CLOSE_CURLY_BRACE

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 147
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 146

   37 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE . instruction_list CLOSE_CURLY_BRACE

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 148
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 147

   19 instruction_list: instruction_list . instruction
   49 for_loop: FOR identifier FROM expression TO expression STEP expression OPEN_CURLY_BRACE instruction_list . CLOSE_CURLY_BRACE

    IF                 shift, and go to state 29
    DO                 shift, and go to state 30
    FOR                shift, and go to state 31
    INPUT              shift, and go to state 32
    OUTPUT             shift, and go to state 33
    CLOSE_CURLY_BRACE  shift, and go to state 149
    identifier         shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 148

   19 instruction_list: instruction_list . instruction
   37 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list . CLOSE_CURLY_BRACE

    IF                 shift, and go to state 29
    DO                 shift, and go to state 30
    FOR                shift, and go to state 31
    INPUT              shift, and go to state 32
    OUTPUT             shift, and go to state 33
    CLOSE_CURLY_BRACE  shift, and go to state 150
    identifier         shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 149

   49 for_loop: FOR identifier FROM expression TO expression STEP expression OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE .

    $default  reduce using rule 49 (for_loop)


state 150

   37 if_statement: IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE ELSE OPEN_CURLY_BRACE instruction_list CLOSE_CURLY_BRACE .

    $default  reduce using rule 37 (if_statement)
