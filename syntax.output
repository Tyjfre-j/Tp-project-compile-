Grammar

    0 $accept: program $end

    1 program: MainPrgm identifier pvg Var declaration_part BeginPg ocb instruction_part ccb EndPg pvg

    2 declaration_part: declaration_list

    3 declaration_list: declaration_list declaration
    4                 | declaration

    5 declaration: variable_declaration
    6            | constant_declaration

    7 variable_declaration: let var_list tp type pvg
    8                     | let var_list tp ob type pvg t_int cb pvg

    9 var_list: identifier
   10         | var_list vg identifier

   11 type: Int
   12     | Float

   13 constant_declaration: define Const identifier tp type egual nature pvg

   14 nature: t_int
   15       | t_float
   16       | op signed_float cp
   17       | op signed_int cp

   18 instruction_part: instruction_list

   19 instruction_list: instruction_list instruction
   20                 | instruction

   21 instruction: affectation
   22            | if_statement
   23            | do_while_loop
   24            | for_loop
   25            | input_statement
   26            | output_statement

   27 affectation: identifier aff expression pvg
   28            | identifier ob expression cb aff expression pvg

   29 expression: identifier
   30           | nature
   31           | expression add expression
   32           | expression sub expression
   33           | expression mult expression
   34           | expression divide expression
   35           | op expression cp

   36 if_statement: IF op condition cp THEN ocb instruction_list ccb
   37             | IF op condition cp THEN ocb instruction_list ccb ELSE ocb instruction_list ccb

   38 condition: expression gt expression
   39          | expression lt expression
   40          | expression ge expression
   41          | expression le expression
   42          | expression eq expression
   43          | expression ne expression
   44          | op condition cp
   45          | condition AND condition
   46          | condition OR condition
   47          | NOT condition

   48 do_while_loop: DO ocb instruction_list ccb WHILE op condition cp pvg

   49 for_loop: FOR identifier FROM expression TO expression STEP expression ocb instruction_list ccb

   50 input_statement: INPUT op identifier cp pvg

   51 output_statement: OUTPUT op STRING cp pvg
   52                 | OUTPUT op STRING vg identifier cp pvg


Terminals, with rules where they appear

$end (0) 0
error (256)
MainPrgm (258) 1
pvg (259) 1 7 8 13 27 28 48 50 51 52
Var (260) 1
let (261) 7 8
define (262) 13
Const (263) 13
t_int (264) 8 14
t_float (265) 15
BeginPg (266) 1
ocb (267) 1 36 37 48 49
ccb (268) 1 36 37 48 49
EndPg (269) 1
egual (270) 13
tp (271) 7 8 13
vg (272) 10 52
ob (273) 8 28
cb (274) 8 28
signed_int (275) 17
signed_float (276) 16
op (277) 16 17 35 36 37 44 48 50 51 52
cp (278) 16 17 35 36 37 44 48 50 51 52
aff (279) 27 28
add (280) 31
sub (281) 32
divide (282) 34
mult (283) 33
IF (284) 36 37
THEN (285) 36 37
ELSE (286) 37
DO (287) 48
WHILE (288) 48
FOR (289) 49
FROM (290) 49
TO (291) 49
STEP (292) 49
lt (293) 39
gt (294) 38
NOT (295) 47
AND (296) 45
OR (297) 46
eq (298) 42
ge (299) 40
le (300) 41
ne (301) 43
INPUT (302) 50
OUTPUT (303) 51 52
STRING (304) 51 52
identifier (305) 1 9 10 13 27 28 29 49 50 52
Int (306) 11
Float (307) 12


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1, on right: 0
declaration_part (55)
    on left: 2, on right: 1
declaration_list (56)
    on left: 3 4, on right: 2 3
declaration (57)
    on left: 5 6, on right: 3 4
variable_declaration (58)
    on left: 7 8, on right: 5
var_list (59)
    on left: 9 10, on right: 7 8 10
type (60)
    on left: 11 12, on right: 7 8 13
constant_declaration (61)
    on left: 13, on right: 6
nature (62)
    on left: 14 15 16 17, on right: 13 30
instruction_part (63)
    on left: 18, on right: 1
instruction_list (64)
    on left: 19 20, on right: 18 19 36 37 48 49
instruction (65)
    on left: 21 22 23 24 25 26, on right: 19 20
affectation (66)
    on left: 27 28, on right: 21
expression (67)
    on left: 29 30 31 32 33 34 35, on right: 27 28 31 32 33 34 35 38
    39 40 41 42 43 49
if_statement (68)
    on left: 36 37, on right: 22
condition (69)
    on left: 38 39 40 41 42 43 44 45 46 47, on right: 36 37 44 45 46
    47 48
do_while_loop (70)
    on left: 48, on right: 23
for_loop (71)
    on left: 49, on right: 24
input_statement (72)
    on left: 50, on right: 25
output_statement (73)
    on left: 51 52, on right: 26


state 0

    0 $accept: . program $end

    MainPrgm  shift, and go to state 1

    program  go to state 2


state 1

    1 program: MainPrgm . identifier pvg Var declaration_part BeginPg ocb instruction_part ccb EndPg pvg

    identifier  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: MainPrgm identifier . pvg Var declaration_part BeginPg ocb instruction_part ccb EndPg pvg

    pvg  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: MainPrgm identifier pvg . Var declaration_part BeginPg ocb instruction_part ccb EndPg pvg

    Var  shift, and go to state 6


state 6

    1 program: MainPrgm identifier pvg Var . declaration_part BeginPg ocb instruction_part ccb EndPg pvg

    let     shift, and go to state 7
    define  shift, and go to state 8

    declaration_part      go to state 9
    declaration_list      go to state 10
    declaration           go to state 11
    variable_declaration  go to state 12
    constant_declaration  go to state 13


state 7

    7 variable_declaration: let . var_list tp type pvg
    8                     | let . var_list tp ob type pvg t_int cb pvg

    identifier  shift, and go to state 14

    var_list  go to state 15


state 8

   13 constant_declaration: define . Const identifier tp type egual nature pvg

    Const  shift, and go to state 16


state 9

    1 program: MainPrgm identifier pvg Var declaration_part . BeginPg ocb instruction_part ccb EndPg pvg

    BeginPg  shift, and go to state 17


state 10

    2 declaration_part: declaration_list .
    3 declaration_list: declaration_list . declaration

    let     shift, and go to state 7
    define  shift, and go to state 8

    $default  reduce using rule 2 (declaration_part)

    declaration           go to state 18
    variable_declaration  go to state 12
    constant_declaration  go to state 13


state 11

    4 declaration_list: declaration .

    $default  reduce using rule 4 (declaration_list)


state 12

    5 declaration: variable_declaration .

    $default  reduce using rule 5 (declaration)


state 13

    6 declaration: constant_declaration .

    $default  reduce using rule 6 (declaration)


state 14

    9 var_list: identifier .

    $default  reduce using rule 9 (var_list)


state 15

    7 variable_declaration: let var_list . tp type pvg
    8                     | let var_list . tp ob type pvg t_int cb pvg
   10 var_list: var_list . vg identifier

    tp  shift, and go to state 19
    vg  shift, and go to state 20


state 16

   13 constant_declaration: define Const . identifier tp type egual nature pvg

    identifier  shift, and go to state 21


state 17

    1 program: MainPrgm identifier pvg Var declaration_part BeginPg . ocb instruction_part ccb EndPg pvg

    ocb  shift, and go to state 22


state 18

    3 declaration_list: declaration_list declaration .

    $default  reduce using rule 3 (declaration_list)


state 19

    7 variable_declaration: let var_list tp . type pvg
    8                     | let var_list tp . ob type pvg t_int cb pvg

    ob     shift, and go to state 23
    Int    shift, and go to state 24
    Float  shift, and go to state 25

    type  go to state 26


state 20

   10 var_list: var_list vg . identifier

    identifier  shift, and go to state 27


state 21

   13 constant_declaration: define Const identifier . tp type egual nature pvg

    tp  shift, and go to state 28


state 22

    1 program: MainPrgm identifier pvg Var declaration_part BeginPg ocb . instruction_part ccb EndPg pvg

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_part  go to state 35
    instruction_list  go to state 36
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 23

    8 variable_declaration: let var_list tp ob . type pvg t_int cb pvg

    Int    shift, and go to state 24
    Float  shift, and go to state 25

    type  go to state 44


state 24

   11 type: Int .

    $default  reduce using rule 11 (type)


state 25

   12 type: Float .

    $default  reduce using rule 12 (type)


state 26

    7 variable_declaration: let var_list tp type . pvg

    pvg  shift, and go to state 45


state 27

   10 var_list: var_list vg identifier .

    $default  reduce using rule 10 (var_list)


state 28

   13 constant_declaration: define Const identifier tp . type egual nature pvg

    Int    shift, and go to state 24
    Float  shift, and go to state 25

    type  go to state 46


state 29

   36 if_statement: IF . op condition cp THEN ocb instruction_list ccb
   37             | IF . op condition cp THEN ocb instruction_list ccb ELSE ocb instruction_list ccb

    op  shift, and go to state 47


state 30

   48 do_while_loop: DO . ocb instruction_list ccb WHILE op condition cp pvg

    ocb  shift, and go to state 48


state 31

   49 for_loop: FOR . identifier FROM expression TO expression STEP expression ocb instruction_list ccb

    identifier  shift, and go to state 49


state 32

   50 input_statement: INPUT . op identifier cp pvg

    op  shift, and go to state 50


state 33

   51 output_statement: OUTPUT . op STRING cp pvg
   52                 | OUTPUT . op STRING vg identifier cp pvg

    op  shift, and go to state 51


state 34

   27 affectation: identifier . aff expression pvg
   28            | identifier . ob expression cb aff expression pvg

    ob   shift, and go to state 52
    aff  shift, and go to state 53


state 35

    1 program: MainPrgm identifier pvg Var declaration_part BeginPg ocb instruction_part . ccb EndPg pvg

    ccb  shift, and go to state 54


state 36

   18 instruction_part: instruction_list .
   19 instruction_list: instruction_list . instruction

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    $default  reduce using rule 18 (instruction_part)

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 37

   20 instruction_list: instruction .

    $default  reduce using rule 20 (instruction_list)


state 38

   21 instruction: affectation .

    $default  reduce using rule 21 (instruction)


state 39

   22 instruction: if_statement .

    $default  reduce using rule 22 (instruction)


state 40

   23 instruction: do_while_loop .

    $default  reduce using rule 23 (instruction)


state 41

   24 instruction: for_loop .

    $default  reduce using rule 24 (instruction)


state 42

   25 instruction: input_statement .

    $default  reduce using rule 25 (instruction)


state 43

   26 instruction: output_statement .

    $default  reduce using rule 26 (instruction)


state 44

    8 variable_declaration: let var_list tp ob type . pvg t_int cb pvg

    pvg  shift, and go to state 56


state 45

    7 variable_declaration: let var_list tp type pvg .

    $default  reduce using rule 7 (variable_declaration)


state 46

   13 constant_declaration: define Const identifier tp type . egual nature pvg

    egual  shift, and go to state 57


state 47

   36 if_statement: IF op . condition cp THEN ocb instruction_list ccb
   37             | IF op . condition cp THEN ocb instruction_list ccb ELSE ocb instruction_list ccb

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 60
    NOT         shift, and go to state 61
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 65


state 48

   48 do_while_loop: DO ocb . instruction_list ccb WHILE op condition cp pvg

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 66
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 49

   49 for_loop: FOR identifier . FROM expression TO expression STEP expression ocb instruction_list ccb

    FROM  shift, and go to state 67


state 50

   50 input_statement: INPUT op . identifier cp pvg

    identifier  shift, and go to state 68


state 51

   51 output_statement: OUTPUT op . STRING cp pvg
   52                 | OUTPUT op . STRING vg identifier cp pvg

    STRING  shift, and go to state 69


state 52

   28 affectation: identifier ob . expression cb aff expression pvg

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 71


state 53

   27 affectation: identifier aff . expression pvg

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 72


state 54

    1 program: MainPrgm identifier pvg Var declaration_part BeginPg ocb instruction_part ccb . EndPg pvg

    EndPg  shift, and go to state 73


state 55

   19 instruction_list: instruction_list instruction .

    $default  reduce using rule 19 (instruction_list)


state 56

    8 variable_declaration: let var_list tp ob type pvg . t_int cb pvg

    t_int  shift, and go to state 74


state 57

   13 constant_declaration: define Const identifier tp type egual . nature pvg

    t_int    shift, and go to state 58
    t_float  shift, and go to state 59
    op       shift, and go to state 75

    nature  go to state 76


state 58

   14 nature: t_int .

    $default  reduce using rule 14 (nature)


state 59

   15 nature: t_float .

    $default  reduce using rule 15 (nature)


state 60

   16 nature: op . signed_float cp
   17       | op . signed_int cp
   35 expression: op . expression cp
   44 condition: op . condition cp

    t_int         shift, and go to state 58
    t_float       shift, and go to state 59
    signed_int    shift, and go to state 77
    signed_float  shift, and go to state 78
    op            shift, and go to state 60
    NOT           shift, and go to state 61
    identifier    shift, and go to state 62

    nature      go to state 63
    expression  go to state 79
    condition   go to state 80


state 61

   47 condition: NOT . condition

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 60
    NOT         shift, and go to state 61
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 81


state 62

   29 expression: identifier .

    $default  reduce using rule 29 (expression)


state 63

   30 expression: nature .

    $default  reduce using rule 30 (expression)


state 64

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   38 condition: expression . gt expression
   39          | expression . lt expression
   40          | expression . ge expression
   41          | expression . le expression
   42          | expression . eq expression
   43          | expression . ne expression

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85
    lt      shift, and go to state 86
    gt      shift, and go to state 87
    eq      shift, and go to state 88
    ge      shift, and go to state 89
    le      shift, and go to state 90
    ne      shift, and go to state 91


state 65

   36 if_statement: IF op condition . cp THEN ocb instruction_list ccb
   37             | IF op condition . cp THEN ocb instruction_list ccb ELSE ocb instruction_list ccb
   45 condition: condition . AND condition
   46          | condition . OR condition

    cp   shift, and go to state 92
    AND  shift, and go to state 93
    OR   shift, and go to state 94


state 66

   19 instruction_list: instruction_list . instruction
   48 do_while_loop: DO ocb instruction_list . ccb WHILE op condition cp pvg

    ccb         shift, and go to state 95
    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 67

   49 for_loop: FOR identifier FROM . expression TO expression STEP expression ocb instruction_list ccb

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 96


state 68

   50 input_statement: INPUT op identifier . cp pvg

    cp  shift, and go to state 97


state 69

   51 output_statement: OUTPUT op STRING . cp pvg
   52                 | OUTPUT op STRING . vg identifier cp pvg

    vg  shift, and go to state 98
    cp  shift, and go to state 99


state 70

   16 nature: op . signed_float cp
   17       | op . signed_int cp
   35 expression: op . expression cp

    t_int         shift, and go to state 58
    t_float       shift, and go to state 59
    signed_int    shift, and go to state 77
    signed_float  shift, and go to state 78
    op            shift, and go to state 70
    identifier    shift, and go to state 62

    nature      go to state 63
    expression  go to state 100


state 71

   28 affectation: identifier ob expression . cb aff expression pvg
   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression

    cb      shift, and go to state 101
    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85


state 72

   27 affectation: identifier aff expression . pvg
   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression

    pvg     shift, and go to state 102
    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85


state 73

    1 program: MainPrgm identifier pvg Var declaration_part BeginPg ocb instruction_part ccb EndPg . pvg

    pvg  shift, and go to state 103


state 74

    8 variable_declaration: let var_list tp ob type pvg t_int . cb pvg

    cb  shift, and go to state 104


state 75

   16 nature: op . signed_float cp
   17       | op . signed_int cp

    signed_int    shift, and go to state 77
    signed_float  shift, and go to state 78


state 76

   13 constant_declaration: define Const identifier tp type egual nature . pvg

    pvg  shift, and go to state 105


state 77

   17 nature: op signed_int . cp

    cp  shift, and go to state 106


state 78

   16 nature: op signed_float . cp

    cp  shift, and go to state 107


state 79

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   35           | op expression . cp
   38 condition: expression . gt expression
   39          | expression . lt expression
   40          | expression . ge expression
   41          | expression . le expression
   42          | expression . eq expression
   43          | expression . ne expression

    cp      shift, and go to state 108
    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85
    lt      shift, and go to state 86
    gt      shift, and go to state 87
    eq      shift, and go to state 88
    ge      shift, and go to state 89
    le      shift, and go to state 90
    ne      shift, and go to state 91


state 80

   44 condition: op condition . cp
   45          | condition . AND condition
   46          | condition . OR condition

    cp   shift, and go to state 109
    AND  shift, and go to state 93
    OR   shift, and go to state 94


state 81

   45 condition: condition . AND condition
   46          | condition . OR condition
   47          | NOT condition .

    $default  reduce using rule 47 (condition)


state 82

   31 expression: expression add . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 110


state 83

   32 expression: expression sub . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 111


state 84

   34 expression: expression divide . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 112


state 85

   33 expression: expression mult . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 113


state 86

   39 condition: expression lt . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 114


state 87

   38 condition: expression gt . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 115


state 88

   42 condition: expression eq . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 116


state 89

   40 condition: expression ge . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 117


state 90

   41 condition: expression le . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 118


state 91

   43 condition: expression ne . expression

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 119


state 92

   36 if_statement: IF op condition cp . THEN ocb instruction_list ccb
   37             | IF op condition cp . THEN ocb instruction_list ccb ELSE ocb instruction_list ccb

    THEN  shift, and go to state 120


state 93

   45 condition: condition AND . condition

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 60
    NOT         shift, and go to state 61
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 121


state 94

   46 condition: condition OR . condition

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 60
    NOT         shift, and go to state 61
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 122


state 95

   48 do_while_loop: DO ocb instruction_list ccb . WHILE op condition cp pvg

    WHILE  shift, and go to state 123


state 96

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   49 for_loop: FOR identifier FROM expression . TO expression STEP expression ocb instruction_list ccb

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85
    TO      shift, and go to state 124


state 97

   50 input_statement: INPUT op identifier cp . pvg

    pvg  shift, and go to state 125


state 98

   52 output_statement: OUTPUT op STRING vg . identifier cp pvg

    identifier  shift, and go to state 126


state 99

   51 output_statement: OUTPUT op STRING cp . pvg

    pvg  shift, and go to state 127


state 100

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   35           | op expression . cp

    cp      shift, and go to state 108
    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85


state 101

   28 affectation: identifier ob expression cb . aff expression pvg

    aff  shift, and go to state 128


state 102

   27 affectation: identifier aff expression pvg .

    $default  reduce using rule 27 (affectation)


state 103

    1 program: MainPrgm identifier pvg Var declaration_part BeginPg ocb instruction_part ccb EndPg pvg .

    $default  reduce using rule 1 (program)


state 104

    8 variable_declaration: let var_list tp ob type pvg t_int cb . pvg

    pvg  shift, and go to state 129


state 105

   13 constant_declaration: define Const identifier tp type egual nature pvg .

    $default  reduce using rule 13 (constant_declaration)


state 106

   17 nature: op signed_int cp .

    $default  reduce using rule 17 (nature)


state 107

   16 nature: op signed_float cp .

    $default  reduce using rule 16 (nature)


state 108

   35 expression: op expression cp .

    $default  reduce using rule 35 (expression)


state 109

   44 condition: op condition cp .

    $default  reduce using rule 44 (condition)


state 110

   31 expression: expression . add expression
   31           | expression add expression .
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression

    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 31 (expression)


state 111

   31 expression: expression . add expression
   32           | expression . sub expression
   32           | expression sub expression .
   33           | expression . mult expression
   34           | expression . divide expression

    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 32 (expression)


state 112

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   34           | expression divide expression .

    $default  reduce using rule 34 (expression)


state 113

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   33           | expression mult expression .
   34           | expression . divide expression

    $default  reduce using rule 33 (expression)


state 114

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   39 condition: expression lt expression .

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 39 (condition)


state 115

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   38 condition: expression gt expression .

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 38 (condition)


state 116

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   42 condition: expression eq expression .

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 42 (condition)


state 117

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   40 condition: expression ge expression .

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 40 (condition)


state 118

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   41 condition: expression le expression .

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 41 (condition)


state 119

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   43 condition: expression ne expression .

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85

    $default  reduce using rule 43 (condition)


state 120

   36 if_statement: IF op condition cp THEN . ocb instruction_list ccb
   37             | IF op condition cp THEN . ocb instruction_list ccb ELSE ocb instruction_list ccb

    ocb  shift, and go to state 130


state 121

   45 condition: condition . AND condition
   45          | condition AND condition .
   46          | condition . OR condition

    $default  reduce using rule 45 (condition)


state 122

   45 condition: condition . AND condition
   46          | condition . OR condition
   46          | condition OR condition .

    $default  reduce using rule 46 (condition)


state 123

   48 do_while_loop: DO ocb instruction_list ccb WHILE . op condition cp pvg

    op  shift, and go to state 131


state 124

   49 for_loop: FOR identifier FROM expression TO . expression STEP expression ocb instruction_list ccb

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 132


state 125

   50 input_statement: INPUT op identifier cp pvg .

    $default  reduce using rule 50 (input_statement)


state 126

   52 output_statement: OUTPUT op STRING vg identifier . cp pvg

    cp  shift, and go to state 133


state 127

   51 output_statement: OUTPUT op STRING cp pvg .

    $default  reduce using rule 51 (output_statement)


state 128

   28 affectation: identifier ob expression cb aff . expression pvg

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 134


state 129

    8 variable_declaration: let var_list tp ob type pvg t_int cb pvg .

    $default  reduce using rule 8 (variable_declaration)


state 130

   36 if_statement: IF op condition cp THEN ocb . instruction_list ccb
   37             | IF op condition cp THEN ocb . instruction_list ccb ELSE ocb instruction_list ccb

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 135
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 131

   48 do_while_loop: DO ocb instruction_list ccb WHILE op . condition cp pvg

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 60
    NOT         shift, and go to state 61
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 64
    condition   go to state 136


state 132

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   49 for_loop: FOR identifier FROM expression TO expression . STEP expression ocb instruction_list ccb

    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85
    STEP    shift, and go to state 137


state 133

   52 output_statement: OUTPUT op STRING vg identifier cp . pvg

    pvg  shift, and go to state 138


state 134

   28 affectation: identifier ob expression cb aff expression . pvg
   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression

    pvg     shift, and go to state 139
    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85


state 135

   19 instruction_list: instruction_list . instruction
   36 if_statement: IF op condition cp THEN ocb instruction_list . ccb
   37             | IF op condition cp THEN ocb instruction_list . ccb ELSE ocb instruction_list ccb

    ccb         shift, and go to state 140
    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 136

   45 condition: condition . AND condition
   46          | condition . OR condition
   48 do_while_loop: DO ocb instruction_list ccb WHILE op condition . cp pvg

    cp   shift, and go to state 141
    AND  shift, and go to state 93
    OR   shift, and go to state 94


state 137

   49 for_loop: FOR identifier FROM expression TO expression STEP . expression ocb instruction_list ccb

    t_int       shift, and go to state 58
    t_float     shift, and go to state 59
    op          shift, and go to state 70
    identifier  shift, and go to state 62

    nature      go to state 63
    expression  go to state 142


state 138

   52 output_statement: OUTPUT op STRING vg identifier cp pvg .

    $default  reduce using rule 52 (output_statement)


state 139

   28 affectation: identifier ob expression cb aff expression pvg .

    $default  reduce using rule 28 (affectation)


state 140

   36 if_statement: IF op condition cp THEN ocb instruction_list ccb .
   37             | IF op condition cp THEN ocb instruction_list ccb . ELSE ocb instruction_list ccb

    ELSE  shift, and go to state 143

    $default  reduce using rule 36 (if_statement)


state 141

   48 do_while_loop: DO ocb instruction_list ccb WHILE op condition cp . pvg

    pvg  shift, and go to state 144


state 142

   31 expression: expression . add expression
   32           | expression . sub expression
   33           | expression . mult expression
   34           | expression . divide expression
   49 for_loop: FOR identifier FROM expression TO expression STEP expression . ocb instruction_list ccb

    ocb     shift, and go to state 145
    add     shift, and go to state 82
    sub     shift, and go to state 83
    divide  shift, and go to state 84
    mult    shift, and go to state 85


state 143

   37 if_statement: IF op condition cp THEN ocb instruction_list ccb ELSE . ocb instruction_list ccb

    ocb  shift, and go to state 146


state 144

   48 do_while_loop: DO ocb instruction_list ccb WHILE op condition cp pvg .

    $default  reduce using rule 48 (do_while_loop)


state 145

   49 for_loop: FOR identifier FROM expression TO expression STEP expression ocb . instruction_list ccb

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 147
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 146

   37 if_statement: IF op condition cp THEN ocb instruction_list ccb ELSE ocb . instruction_list ccb

    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction_list  go to state 148
    instruction       go to state 37
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 147

   19 instruction_list: instruction_list . instruction
   49 for_loop: FOR identifier FROM expression TO expression STEP expression ocb instruction_list . ccb

    ccb         shift, and go to state 149
    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 148

   19 instruction_list: instruction_list . instruction
   37 if_statement: IF op condition cp THEN ocb instruction_list ccb ELSE ocb instruction_list . ccb

    ccb         shift, and go to state 150
    IF          shift, and go to state 29
    DO          shift, and go to state 30
    FOR         shift, and go to state 31
    INPUT       shift, and go to state 32
    OUTPUT      shift, and go to state 33
    identifier  shift, and go to state 34

    instruction       go to state 55
    affectation       go to state 38
    if_statement      go to state 39
    do_while_loop     go to state 40
    for_loop          go to state 41
    input_statement   go to state 42
    output_statement  go to state 43


state 149

   49 for_loop: FOR identifier FROM expression TO expression STEP expression ocb instruction_list ccb .

    $default  reduce using rule 49 (for_loop)


state 150

   37 if_statement: IF op condition cp THEN ocb instruction_list ccb ELSE ocb instruction_list ccb .

    $default  reduce using rule 37 (if_statement)
